name: Release Packages and Docker images
on:
  release:
    types: [published]

# Checks if any concurrent jobs is running for release CI and eventually cancel it.
concurrency:
  group: ci-release
  cancel-in-progress: true  

jobs:
  release-settings:
    runs-on: ubuntu-latest
    outputs:
      is_latest: ${{ steps.get_settings.outputs.is_latest }} 
      bucket_suffix: ${{ steps.get_settings.outputs.bucket_suffix }}
      latest_engine_version: ${{ steps.latest_engine_version.outputs.version }}
      current_engine_version: ${{ steps.current_engine_version.outputs.version }}
      latest_fields: ${{ steps.latest_fields.outputs.fields }}
      current_fields:  ${{ steps.current_fields.outputs.fields }}
    steps:
      - name: Get latest release
        uses: rez0n/actions-github-release@v2.0
        id: latest_release
        env:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          type: "stable"

      - name: Get latest release engine version
        uses: addnab/docker-run-action@v3
        id: latest_engine_version
        with:
          registry: docker.io
          image: falcosecurity/falco-no-driver:${{ steps.latest_release.outputs.release }}
          run: |
            latest_engine_version=$(falco --version -o "json_output=true" | jq .engine_version)
            echo "latest_engine_version=$latest_engine_version" >> ${'GITHUB_OUTPUT'}

      - name: Get current engine version for this release
        uses: addnab/docker-run-action@v3
        id: current_engine_version
        with:
          registry: docker.io
          image: falcosecurity/falco-no-driver:master
          run: |
            current_engine_version=$(falco --version -o "json_output=true" | jq .engine_version)
            echo "current_engine_version=$current_engine_version" >> ${'GITHUB_OUTPUT'}

      - name: Store latest fields
        uses: addnab/docker-run-action@v3
        id: current_engine_version
        with:
          registry: docker.io
          image: falcosecurity/falco-no-driver:${{ steps.latest_release.outputs.release }}
          run: |
            latest_fields=$(falco --list -N -o "json_output=true")
            echo "latest_fields=$latest_fields" >> ${'GITHUB_OUTPUT'}
      
      - name: Store current fields
        uses: addnab/docker-run-action@v3
        id: current_engine_version
        with:
          registry: docker.io
          image: falcosecurity/falco-no-driver:master
          run: |
            current_fields=$(falco --list -N -o "json_output=true")
            echo "current_fields=$current_fields" >> ${'GITHUB_OUTPUT'}
        
      - name: Compare engine versions and fields 
        id: compare_engine_version_fields
        shell: python
        run: | 
          import os 
          import sys
          import hashlib
          
          latest_engine_version = os.environ['steps.latest_engine_version.outputs.version']
          current_engine_version = os.environ['steps.current_engine_version.outputs.version']
          if latest_engine_version != current_engine_version: # bump already took place, safe to continue
            sys.exit(0)

          latest_engine_version = os.environ['steps.latest_engine_version.outputs.version']
          current_engine_version = os.environ['steps.current_engine_version.outputs.version']

          latest_fields = os.environ['steps.latest_fields.outputs.fields']
          current_fields =  os.environ['steps.current_fields.outputs.fields']

          latest_fields_hash = hashlib.sha256(latest_fields.encode('UTF-8')).hexdigest()
          current_fields_hash = hashlib.sha256(current_fields.encode('UTF-8')).hexdigest()

          if latest_fields_hash != current_fields_hash:
            sys.exit(1)

      - name: Get settings for this release
        id: get_settings
        shell: python
        run: |
          import os
          import re
          import sys

          semver_no_meta = '''^(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?$'''
          tag_name = '${{ github.event.release.tag_name }}'

          is_valid_version = re.match(semver_no_meta, tag_name) is not None
          if not is_valid_version:
            print(f'Release version {tag_name} is not a valid full or pre-release. See RELEASE.md for more information.')
            sys.exit(1)

          is_prerelease = '-' in tag_name

          # Safeguard: you need to both set "latest" in GH and not have suffixes to overwrite latest
          is_latest = '${{ steps.latest_release.outputs.release }}' == tag_name and not is_prerelease

          bucket_suffix = '-dev' if is_prerelease else ''

          with open(os.environ['GITHUB_OUTPUT'], 'a') as ofp:
            print(f'is_latest={is_latest}'.lower(), file=ofp)
            print(f'bucket_suffix={bucket_suffix}', file=ofp)

  build-packages:
    needs: [release-settings]
    uses: ./.github/workflows/reusable_build_packages.yaml
    with:
      arch: x86_64
      version: ${{ github.event.release.tag_name }}
    secrets: inherit

  build-packages-arm64:
    needs: [release-settings]
    uses: ./.github/workflows/reusable_build_packages.yaml
    with:
      arch: aarch64
      version: ${{ github.event.release.tag_name }}
    secrets: inherit
    
  publish-packages:
    needs: [release-settings, build-packages, build-packages-arm64]
    uses: ./.github/workflows/reusable_publish_packages.yaml
    with:
      bucket_suffix: ${{ needs.release-settings.outputs.bucket_suffix }}
      version: ${{ github.event.release.tag_name }}
    secrets: inherit
  
  # Both build-docker and its arm64 counterpart require build-packages because they use its output
  build-docker:
    needs: [release-settings, build-packages, publish-packages]
    uses: ./.github/workflows/reusable_build_docker.yaml
    with:
      arch: x86_64
      bucket_suffix: ${{ needs.release-settings.outputs.bucket_suffix }}
      version: ${{ github.event.release.tag_name }}
      tag: ${{ github.event.release.tag_name }}
    secrets: inherit
    
  build-docker-arm64:
    needs: [release-settings, build-packages, publish-packages]
    uses: ./.github/workflows/reusable_build_docker.yaml
    with:
      arch: aarch64
      bucket_suffix: ${{ needs.release-settings.outputs.bucket_suffix }}
      version: ${{ github.event.release.tag_name }}
      tag: ${{ github.event.release.tag_name }}
    secrets: inherit

  publish-docker:
    needs: [release-settings, build-docker, build-docker-arm64]
    uses: ./.github/workflows/reusable_publish_docker.yaml
    secrets: inherit
    with:
      is_latest: ${{ needs.release-settings.outputs.is_latest == 'true' }}
      tag: ${{ github.event.release.tag_name }}
      sign: true
